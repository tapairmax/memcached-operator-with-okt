package controllers

/**
*** THIS FILE IS AUTO-GENERATED BY THE OKT RESOURCE GENERATOR (CLI TOOL)
*** It can be modified if needed for specific needs
*** Note that any ResourceMutator of this kind managed by your own controller depends on this Resource Stub!
**/

// Resource type Deployment: {Deployment apps/v1   }

import (
	oktres "github.com/Orange-OpenSource/Operators-Karma-Tools/resources"
	okthelpers "github.com/Orange-OpenSource/Operators-Karma-Tools/resources/k8s"

	k8sres "k8s.io/api/apps/v1"
	"k8s.io/apimachinery/pkg/runtime"

	k8sclient "sigs.k8s.io/controller-runtime/pkg/client"
)

// DeploymentResourceStub an OKT extended Deployment resource
type DeploymentResourceStub struct {
	Expected                         k8sres.Deployment
	okthelpers.MutableResourceObject // OKT K8S resource
	oktres.MutationHelper
}

// blank assignment to verify that ReconcileCockroachDB implements reconcile.Reconciler
var _ oktres.MutableResource = &DeploymentResourceStub{}

// GetResourceObject Implement a Stub interface function to get the Mutable Object
func (r *DeploymentResourceStub) GetResourceObject() *okthelpers.ResourceObject {
	return &r.ResourceObject
}

// GetExpected Implements a Stub interface function to get the Expected object
func (r *DeploymentResourceStub) GetExpected() *k8sres.Deployment {
	return &r.Expected
}

// Init Initialize OKT resource with K8S runtime object in the same Namespace of the Custom Resource
func (r *DeploymentResourceStub) Init(client k8sclient.Client, namespace, name string) error {
	r.Expected.APIVersion = "apps/v1"
	r.Expected.Kind = "Deployment"
	r.MutationHelper = &okthelpers.DefaultMutationHelper{Expected: &r.Expected}

	return r.MutableResourceObject.Init(client, &r.Expected, namespace, name)
}

// PreMutate xx
func (r *DeploymentResourceStub) PreMutate(scheme *runtime.Scheme) error {
	if err := r.MutationHelper.PreMutate(); err != nil {
		return err
	}
	return nil
}

// PostMutate xx
func (r *DeploymentResourceStub) PostMutate(cr k8sclient.Object, scheme *runtime.Scheme) error {
	if scheme != nil {
		if err := r.SetOwnerReference(cr, scheme); err != nil {
			return err
		}
	}
	if err := r.MutationHelper.PostMutate(); err != nil {
		return err
	}
	return nil
}

// GetHashableRefHelper provide an helper for the HashableRef interface
// This will help to defines which object(s) data has to be used to detect modifications thanks to the Hash computation
// The AddSpec() method of this helper adds the whole "Spec" object in the hashable Ref.
// The Spec can be something else than the typical K8S Spec resource part when it does not exist in the K8S API definition
// It can be defined by the MutationHelper for this resource, eventualy in accordance with Pre/PostMutate() methods provided with the helper.
func (r *DeploymentResourceStub) GetHashableRefHelper() *okthelpers.HashableRefHelper {
	hr := &okthelpers.HashableRefHelper{}
	hr.Init(r.MutationHelper)

	return hr
}
